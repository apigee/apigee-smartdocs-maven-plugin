<?xml version="1.0" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>apigee</groupId>
    <artifactId>parent-pom</artifactId>
    <packaging>pom</packaging>
    <version>1.0</version>
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Maven Plugin Repository</name>
            <url>http://repo1.maven.org/maven2</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
        </pluginRepository>
    </pluginRepositories>
    <!-- Since Maven 3.0.3, for two plugins bound to the same phase, the order
         of execution is the same as the order in which you define them. -->
    <build>
        <plugins>
            <plugin>
                <groupId>com.apigee.smartdocs.config</groupId>
                <artifactId>apigee-smartdocs-maven-plugin</artifactId>
                <version>1.0.5</version>
                <!--
                    portal.model.vocabulary is the machine name of the model vocabulary stored within the Developer Portal.
                    portal.model.fields represent each field of data from the OpenAPI document that would be pushed to the Developer Portal.
                      path represents the signifies the path to data stored within the info object. 
                        The pipe character can be used to traverse into sub-items. For instance, with a OpenAPI document containing  { "info": { "contact": { "company": "Google" } } }, you could be access the data by setting the path to contact|company.
                      field represents the machine name of the field within the Developer portal.

                      portal.model.config.name can be used to configure the modelName being sent to the SmartDocs API
                      Without this configuration, the default field used is the title which has spaces replaced by dashes
                        The caret symbol (^) is used to separate which fields you want extracted from the info object and it will be replaced with dash (-)
                        The pipe character is used to traverse into sub-items if necessary
                      For example, if the OpenAPI document contains { "info": { "title": "Hello World API", "contact": { "x-country": "Canada" } } }
                      And the config is as below "contact|x-country^title"
                      The Model Name would be "Canada-Hello-World-API"
                -->
                <!--
                <configuration>
                    <portal.model.vocabulary>smartdocs_models</portal.model.vocabulary>
                    <portal.model.fields>
                        <department>
                            <path>contact|x-department</path>
                            <field>field_department</field>
                        </department>
                        <approval-type>
                            <path>contact|x-approval-type</path>
                            <field>field_approval_type</field>
                        </approval-type>
                    </portal.model.fields>
                    <portal.model.config.name>contact|x-country^title</portal.model.config.name>
                </configuration>
                -->
                <executions>
                    <execution>
                        <id>smartdocs-deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>apimodel</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
